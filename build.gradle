// Top-level build file where you can add configuration options common to all sub-projects/modules.
allprojects {
    buildscript {
        repositories {
            jcenter()
            mavenCentral()
        }
    }
    repositories {
        jcenter()
        mavenCentral()
    }
}

buildscript {

    repositories {
        jcenter()
        mavenCentral()
    }


    dependencies {

        // make sure an up to date version of httpmime is used for the coveralls plugin
        classpath "org.apache.httpcomponents:httpmime:${httpmimeVersion}"

        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${coverallsGradlePluginVersion}"
        classpath "com.android.tools.build:gradle:${androidGradleVersion}"
    }
}

task translateLeBlueJava(type:Exec) {
    FileTree tree = fileTree(dir: 'LeBLue-java/src/main/java')
    tree.include '**/*.java'

    executable System.getenv()['J2OBJC_HOME'] + '/j2objc'
    args '--prefixes', file('objc/prefixes.properties').path
    args '--no-package-directories'
    args '-d', file('objc/generated/').path
    args '-sourcepath', tree.dir ,''
    args '--swift-friendly'
    args '-x', 'objective-c++'
    args tree
}


task translateLeBlueJavaTest(type:Exec) {

    FileTree mainTree = fileTree(dir: 'LeBLue-java/src/main/java')
    mainTree.include '**/*.java'
    FileTree tree = fileTree(dir: 'LeBLue-java/src/test/java')
    tree.include '**/*.java'
    executable System.getenv()['J2OBJC_HOME'] + '/j2objc'
    args '--prefixes', file('objc/prefixes.properties').path
    args '--no-package-directories'
    args '-d', file('objc/generated/').path
    args '--swift-friendly'
    args '-x', 'objective-c++'
    String dir1 = tree.dir
    String dir2 = mainTree.dir
    args '-sourcepath',dir1 + ":" + dir2
    args '-classpath', System.getenv()['J2OBJC_HOME'] + '/lib/j2objc_junit.jar'
    args tree
}


task compileTranslatedLeBlueJavaTest(type:Exec) {
    executable System.getenv()['J2OBJC_HOME'] + '/j2objcc'
    args "-I${file("objc/generated/").path}"
    args "-ObjC", "-ljunit", "-ljre_emul"
    args "-o", "testrunner"
    FileTree tree = fileTree(dir: "objc/generated/", include: '**/*.mm')
    args tree

}

task testTranslatedLeBlueJava(type:Exec) {

    executable file("testrunner")
    args 'org.junit.runner.JUnitCore'
    FileTree tree = fileTree(dir: "objc/generated/", include: '**/*Test.mm')
    tree.exclude '**/MockerTest.mm'

    tree.each { File file ->
        println file
        args file.name.replace(".mm", "")
    }
}


task deleteGenerated() << {
    delete "objc/generated/"

}

task createDirs(dependsOn:deleteGenerated ) << {
    file("objc/generated/").mkdirs()
}

task removeHeader << {

    FileTree tree = fileTree(dir: 'objc/generated/')
    tree.include '**/*.m'
    tree.include '**/*.mm'
    tree.include '**/*.h'


    tree.each { File file ->
        String contents = new File(file.path).getText('UTF-8')

        //remove generated comments

        contents = contents.substring(contents.indexOf('\n') + 1);
        contents = contents.substring(contents.indexOf('\n') + 1);
        contents = contents.substring(contents.indexOf('\n') + 1);
        contents = contents.substring(contents.indexOf('\n') + 1);

        new File(file.path).write(contents, 'UTF-8')

    }
}